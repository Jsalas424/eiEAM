% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eam_isotropic_remesh.R
\name{eam_isotropic_remesh}
\alias{eam_isotropic_remesh}
\title{EAM Isotropic Remeshing with ROI Optimization}
\usage{
eam_isotropic_remesh(
  mesh3d_obj,
  target_edge_length,
  iterations = 5,
  feature_angle_deg = 90,
  max_surf_dist = 2,
  surf_dist_check = FALSE,
  adaptive = FALSE,
  split = TRUE,
  collapse = TRUE,
  swap = TRUE,
  smooth = TRUE,
  project = TRUE
)
}
\arguments{
\item{mesh3d_obj}{A mesh3d object from the rgl package to be remeshed}

\item{target_edge_length}{Numeric. Target edge length for uniform triangle sizing.}

\item{iterations}{Integer. Number of remeshing iterations to perform (default: 5).}

\item{feature_angle_deg}{Numeric. Angle threshold in degrees for preserving sharp features (default: 90).}

\item{max_surf_dist}{Numeric. Maximum allowed surface distance during remeshing (default: 2).}

\item{surf_dist_check}{Logical. Whether to monitor distance to original surface. When TRUE, we maintain higher fidelity to the original mesh. For EAM reprocessing, we want this FALSE. We want to algorithm to freely restructure triangles. (default: FALSE).}

\item{adaptive}{Logical. Whether to use adaptive triangle sizing. When true, this will generate different triangle sizes depending on the curvature of the mesh at that point. For EAM post-processing purposes, we usually want this FALSE. (default: FALSE).}

\item{split, collapse, swap, smooth, project}{Logical flags for Rvcg remesher (all TRUE by default).}
}
\value{
A list with \code{vertices_roi}, \code{faces_roi}, \code{mesh3d_roi},
\code{original_vertex_count}, \code{roi_vertex_count}, and \code{face_count}.
}
\description{
Performs isotropic remeshing using Rvcg and optimizes the mesh by
removing unused vertices and creating clean vertex/face data structures suitable
for cardiovascular mesh analysis.
}
\examples{
## Minimal, non-interactive example (CRAN-safe):
if (requireNamespace("rgl", quietly = TRUE) &&
    requireNamespace("Rvcg", quietly = TRUE)) {
  # Build a small mesh without opening a graphics device
  mesh <- rgl::icosahedron3d()
  mesh <- rgl::subdivision3d(mesh, depth = 1)   # keep small for speed
  # Run remeshing quickly (few iterations, coarse target length)
  res <- eam_isotropic_remesh(
    mesh3d_obj         = mesh,
    target_edge_length = 0.5,
    iterations         = 2,
    surf_dist_check    = FALSE,
    adaptive           = FALSE
  )
  # Light checks / output that don't require a display
  stopifnot(
    is.list(res),
    all(c("vertices_roi","faces_roi","mesh3d_roi") \%in\% names(res)),
    nrow(res$vertices_roi) > 0L,
    nrow(res$faces_roi)    > 0L
  )
  print(c(
    original_vertices = res$original_vertex_count,
    roi_vertices      = res$roi_vertex_count,
    roi_faces         = res$face_count
  ))
}
## Optional interactive visualization (not run on CRAN):
\dontrun{
if (interactive() &&
    requireNamespace("rgl", quietly = TRUE) &&
    requireNamespace("Rvcg", quietly = TRUE)) {
  mesh <- rgl::subdivision3d(rgl::icosahedron3d(), depth = 2)
  res  <- eam_isotropic_remesh(mesh, target_edge_length = 0.25, iterations = 3)
  rgl::clear3d()
  rgl::shade3d(mesh, color = "deepskyblue", alpha = 0.35); rgl::wire3d(mesh, color = "blue")
  rgl::shade3d(res$mesh3d_roi, color = "tomato", alpha = 0.5)
  rgl::wire3d(res$mesh3d_roi, color = "red")
  rgl::axes3d(); rgl::aspect3d(1,1,1)
}
}

}
